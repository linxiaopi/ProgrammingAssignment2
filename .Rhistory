I %p% love
"I" %p% "love""
"R!"
"I" %p% "love" %p% "R!"
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- asDate("1969-01-01")
d2 <- as.Date("1969-01-01")
unclass(d2)
info()
bye()
exit
q()
library(swirl)
swirl()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
ts$min
t2$min
weekdays(t1)
weekdays(d1)
weekdays(t1)
months(t1)
quarter(t2)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y, %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = "days")
q()
letter
x <- c("a", "b", "c", "d")
for(letter in x){}
for(letter in x){print(letter)}
x <- 1:4
for(letter in x){print(letter)}
rbinom(1, 1, 0.5)
rbinom(1, 1, 0.5)
rbinom(1, 1, 0.5)
rbinom(1, 1, 0.5)
rbinom(1, 1, 0.5)
rbinom(1, 1, 0.5)
rbinom(1, 1, 0.5)
rbinom(1, 1, 0.5)
rbinom(1, 1, 0.5)
rbinom(1, 1, 0.5)
rbinom(1, 1, 0.5)
rbinom(1, 1, 0.5)
rbinom(1, 1, 0.5)
for(letter in x){print(letter)}
for(letter in x){print(letter)}
rbinom(2, 1, 0.5)
rbinom(2, 1, 0.5)
rbinom(2, 1, 0.5)
rbinom(2, 1, 0.5)
rbinom(2, 1, 0.5)
rbinom(2, 1, 0.5)
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
rbinom(5, 1, 0.5)
environment(mean)
make.pow <- function(x){}
make.pow <- function(x){ pow <- function(n){ x^n } }
cube <- make.pow(3)
cube(3)
environment(cube)
ls(environment(cube))
ls(environment(mean))
for (i in 1:10) {
if (!i %% 2){
next
}
print(i)
}
1 %% 2
2 %% 2
!1
!2 %% 2
!1 %% 2
x <- list(rep(1,4), rep(2,3), rep(3,2), rep(4,1))
x
str(x)
names(x)
y <- mapply(rep, 1:4, 4:1)
y
identical(x,y)
x
y
str(x)
str(y)
rnorm()
rnorm
rnorm(5,1,2)
rnorm(5,1,2)
rnorm(5,1,2)
list
mapply(rep, times=1:4, MoreArgs=list(x=42))
mapply(rep, 1:4, MoreArgs=list(x=42))
mapply(rep, 1:4,42)
mapply(rep, times = 1:4, x = 4:1)
mapply(rep, 1:4, 4:1)
mapply(rnorm(1:5, 5:1, 2))
rnorm
rnorm(5,1,2)
mapply(rnorm(5, 1, 2))
noise <- function(n, mean, sd) {}
noise <- function(n, mean, sd) {
rnorm(n, mean, sd)}
noise
mapply(noise, 1:5, 6:10, 2)
mapply(noise, 1:5, 6:10, .5:2)
mapply(noise, 1:5, 6:10, 0.5:2)
mapply(noise, 1:5, 6:10, 1:5)
mapply(noise, 1:5, 6:10, 1)
mapply(noise, 1:5, 6:10, 0.5)
mapply(noise, 1:5, 6:10, 0.1)
mapply(noise, 1:5, 6:10, 0.1:0.5)
mapply(noise, 1:5, 6:10, 0.5:0.1)
mapply(noise, 1:5, 6:10, 0.5:0.1)
mapply(noise, 1:5, 6:10, 0.5:0.1)
mapply(noise, 1:5, 6:10, 0.5:0.1)
mapply(noise, 1:5, 6:10, 0.5:0.1)
mapply(noise, 1:5, 6:10, 0.5:0.1)
mapply(noise, 1:5, 6:10, 0.5:0.1)
library(swirl)
swirl()
q()
swirl()
head(flags)
swirl_options()
dim(flags)
class(flags)
as.list(flags)
head(as.list(flags))
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character((cls_list))
as.character(cls_list)
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
str(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
uniue_vals <- lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
class(sapply(unique_vals, length))
str(sapply(unique_vals, length))
sapply(flags, unique)
lapply(unique_cals, function(elem) elem[2])
lapply(unique_vals, function(elem) elem[2])
play()
viewinfo(flags)
viewinfo()
nxt()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
play()
vapply(flag_colors, mean)
vapply(flag_colors, mean, numeric(1))
vapply(flag_colors, mean, integer(1))
vapply(flag_colors, mean, numeric(1))
nxt()
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
head(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
class(tapply(iris$Sepal.Length, iris$Species, mean))
class(iris)
apply(iris,[, 1:4], 2, mean)
apply(iris[ , 1:4], 2, mean)
apply(iris[ , 1:4], 1, mean)
class(apply(iris[ , 1:4], 1, mean))
class(apply(iris[ , 1:4], 2, mean))
apply(iris, 2, mean)
colMeans(iris)
rowMeans(iris[ , 1:4])
colMeans(iris[ , 1:4])
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
class(mtcars)
str(mtcars)
head(mtcars[, 1])
apply(mtcars, 2, mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
mhp <- tapply(mtcars$hp, mtcars$cyl, mean)
mhp
str(mhp)
mhp$8
mhp["8"]
mhp["8"] - mhp["4"]
209.21429-82.63636
debug(ls)
ls
?ls
debug(ls)
ls(nothing)
q
q()
exit()
?
ls(mtcars)
ls()
x <- 16:30
length(x)
x[13:15]
x[(length(x)-2:length(x))]
x[(length(x)-2):length(x)]
x[(length(x)-2:length(x))]
x[(length(x)-2]
x[(length(x)-2:15]
x[(length(x)-2)]
x[(length(x)-2:15)]
x[(2:15)]
x[(15-2:15)]
x[((15-2):15)]
x[15-2]
x[15-3]
x[15-4]
x[15-5]
x[15-15]
x[15-14]
ls()
rm(ls)
rm(ls())
rm(list=ls())
x -2
x =2
rm(x)
library(datasets)
data(mtcars)
?data
data()
data(USDSA)
library(.)
theCol <- "cyl"
theCol
mtcars[[theCol]]
mtcars$cyl
mtcars[[theCol]]
str(mtcars)
mtcars[[2]]
mtcars[[2,]]
class(mtcars)
class(mtcars$cyl)
mtcars[, theCol]
mtcars[[theCol]]
mtcars$cyl
mtcars$theCol
head(mtcars[ , 1:3])
theCols <- c("mpg", "cyl", "disp")
head(mtcars[ , theCols])
mtcars[20:22, ]
head(mtcars[mtcars$cyl == 4 & mtcars$am == 1,])
head(mtcars[ , "cyl"])
head(mtcars[ , "cyl"] == 4, ])
head(mtcars[mtcars[ , "cyl"] == 4, ])
theSubsetRows <- which(mtcars$cyl == 4)
head(mtcars[theSubsetRows, ])
theSubsetRows
head(mtcars[!is.na(mtcars[ , "cyl"]), ])
mtcars[!is.na(mtcars[ , "cyl"]), ]
mtcars
is.nat(mtcars$cyl)
is.na(mtcars$cyl)
which(is.na(mtcars$cyl))
which(!is.na(mtcars$cyl))
str(mtcars)
?[
?"["
system.time() #
RProf() #
mtcars[4]
str(mtcars)
mtcars[[4]]
class(mtcars[[4]])
class(mtcars[4])
mtcars[1:5, "cyl"]
head(mtcars[1:5, "cyl"])
class(mtcars[1:5, "cyl"])
mtcars[, "cyl"]
mtcars[, 1:4]
head(mtcars[, 1:4])
class(mtcars[, 1:4])
mtcars[5]
mtcars[[5]]
4 %in% mtcars$cyl
3 %in% mtcars$cyl
3 %in% mtcars$cyl[1:5]
4 %in% mtcars$cyl[1:5]
4 %in% mtcars$cyl[c(1:5)]
mtcars[mtcars$cyl %in% c(1:5)]
mtcars[mtcars$cyl %in% c(1:5)l ]
mtcars[mtcars$cyl %in% c(1:5), ]
mtcars[mtcars$cyl %in% c(1), ]
mtcars[mtcars$cyl %in% c(1,5), ]
mtcars
mtcars[mtcars$cyl %in% c(1,3), ]
mtcars[mtcars$cyl %in% c(1,4), ]
mtcars[mtcars$cyl %in% c(1:5), ]
which(mtcars$cyl == 4)
?which
which(mtcars == "cyl")
which(11 <- c(T,F,T,NA,F,F,T))
which(ll <- c(TRUE, FALSE, TRUE, NA, FALSE, FALSE, TRUE)) #> 1 3 7
which(ll <- c(TRUE, FALSE, TRUE, NA, FALSE, FALSE, TRUE))
11
rm(theCol*)
rm(theCol)
rm(theCols)
rm(theSubsetRows)
names(11)
names(11) <- letters[seq(11)]
which(LETTERS == "R")
LETTERS
names(11) <- letters[seq(11)]
names(ll) <- letters[seq(ll)]
ll
which(ll)
letters
LETTERS
which(ll)
which((1:12)%%2 == 0)
%%2 == 0 %in% 1:12
1:12%%2 == 0 %in% 1:12
which(1:10 > 3, arr.ind = TRUE)
class(which(1:10 > 3, arr.ind = TRUE))
str(which(1:10 > 3, arr.ind = TRUE))
str(which(1:10 > 3, arr.ind = FALSE))
class(which(1:10 > 3, arr.ind = FALSE))
which(1:10 > 3, arr.ind = F)
which(mtcars$cyl == 4)
mtcars[ , which(mtcars$cyl == 4)]
mtcars[which(mtcars$cyl == 4), ]
?"<<-"
x <- 5
x
median(x = 1:10)
rm(x)
median(x = 1:10)
median(x = 1:10)
x
median(test = 1:10)
median(test <- 1:10)
rm(test)
test
x
median(x = 1:10)
median(test <- 1:10)
rm(test)
median(test = 1:10)
test  <- c(100:200)
test
median(test <- 1:10)
test
a <- 1
f <- function(a) return(TRUE)
f <- f(a <- a + 1); a
a <- 1
f <- function(a) return(TRUE)
f(a <- a + 1)
a
a  <- a + 1
a
f(a <- a + 1)
test
median(test <- test + 100)
test
a <- b <- c <- 6
a <- b <- 6 <- c
rm(c)
a <- b <- 6 <- c
rm(a)
rm(b)
a <- b <- 6 <- c
6 -> c -> b -> a
rm(list = ls())
set()
?set
m <- NULL
m
class(m)
?get
get <- c(1,2,3)
get
rm(get)
rm(m)
x  <- c(100:200)
x
get <- function() x
y  <- c(0:100)
get(x)
get
get()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
list(set = set)
makeVector(c(1,2,3))
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
list(set = set)
}
makeVector(c(1,2,3))
rm(list=ls())
set <- function(y) {
x <<- y
m <<- NULL
}
set()
set(3)
get <- function() x
get
get()
rm(list=ls())
?message
?return
(function(x, y){ z <- x^2 + y^2; x+y+z })
(function(x, y){ z <- x^2 + y^2; x+y+z })(0:7, 1)
setwd "C:/Users/John/git/R_Programming/ProgrammingAssignment2"
pwd
getwd
getwd()
setwd("C:/Users/John/git/R_Programming/ProgrammingAssignment2")
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
Inv <- NULL
set <- function(y) {
x <<- y
Inv <<- NULL
}
get <- function() x
setI <- function(inv) {
Inv <<- inv
}
getI <- function() Inv
list(set = set, get = get, setI = setI, getI = getI)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
Inv <- x$getI()
if(!is.null(Inv)) {
message("Getting cached data")
return(Inv)
}
data <- x$get()
Inv <- solve(data, ...)
x$setI(Inv)
Inv
}
a <- matrix(10:13,2,2)
solve(a)
b <- makeCacheMatrix(a)
b
cacheSolve(b)
